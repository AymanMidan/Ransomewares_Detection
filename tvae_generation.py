import pandas as pd
from sdv.metadata import SingleTableMetadata
from sdv.single_table import TVAESynthesizer
import torch
print("üöÄ GPU disponible :", torch.cuda.is_available())
print("üîç Appareil utilis√© par PyTorch :", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "CPU")

# Charger le dataset
file_path = "dataset_reduit_et_normaliser.excel"
df_features = pd.read_excel(file_path)

# V√©rifier le dataset
print("Aper√ßu du dataset original :")
print(df_features.head())

# Cr√©er et d√©tecter les m√©tadonn√©es
metadata = SingleTableMetadata()
metadata.detect_from_dataframe(df_features)

metadata.update_column("Sample_Type", sdtype="categorical")

# Forcer certaines colonnes √† √™tre num√©riques si SDV s'est tromp√©, sauf "Sample_Type"
numerical_columns = df_features.select_dtypes(include=['number']).columns.tolist()
numerical_columns.remove("Sample_Type")  # Exclure Sample_Type car c'est une cat√©gorie

for col in numerical_columns:
    metadata.update_column(col, sdtype="numerical")


# V√©rifier si des colonnes sont mal cat√©goris√©es
print("\nTypes de colonnes d√©tect√©s par SDV :")
print(metadata.columns)

# Instancier et entra√Æner le mod√®le TVAE
model = TVAESynthesizer(
    metadata,
    enforce_min_max_values=False,  # Pour respecter les valeurs originales
    epochs=500,
    batch_size=500,
)

print("\nEntra√Ænement en cours...")
model.fit(df_features)
print("‚úÖ Entra√Ænement termin√© !")

# G√©n√©rer de nouvelles donn√©es
synthetic_data = model.sample(num_rows=len(df_features))

# V√©rifier les donn√©es g√©n√©r√©es
print("\nAper√ßu des donn√©es synth√©tiques :")
print(synthetic_data.head())

# Sauvegarder le dataset g√©n√©r√©
synthetic_data.to_excel("dataset_synthetique_tvae.xlsx", index=False)
print("\n‚úÖ Dataset synth√©tique sauvegard√© sous 'dataset_synthetique_tvae.xlsx' !")
